{"version":3,"sources":["constants.js","components/@shared/Button/index.js","components/@shared/Card/index.js","components/@shared/Header/index.js","components/@shared/Input/index.js","components/@shared/Modal/index.js","components/@shared/Radio/index.js","components/CardTypeRadio/index.js","utils.js","components/VirtualKeyboard/index.js","components/VirtualKeyboardInput/index.js","hooks/input/useCardNumbersInput.js","hooks/input/useControlledInput.js","hooks/input/useExpirationDateInput.js","hooks/input/useModalVirtualKeyboardInput.js","hooks/input/useModalCardTypeInput.js","hooks/@shared/useEffectAfterInitialize.js","hooks/modal/useModalInterface.js","pages/CardAddition/CardAdditionForm.js","components/VirtualKeyboardModal/index.js","components/CardTypeSelectionModal/index.js","context/CardAdditionContext.js","pages/CardAddition/index.js","pages/CompleteCardAddition/index.js","components/CardAdditionButton/index.js","pages/MyCardList/index.js","pages/index.js","index.js"],"names":["URL","ALERT_MESSAGE","QUERY_STRING_KEY","FORMAT_CHAR","HIDDEN_NUMBER","CARD_NUMBERS_SEPARATOR","CARD_NUMBERS_SEPARATOR_REG","EXPIRATION_DATE_SEPARATOR","CARD_NUMBER","LENGTH","PARTIAL_LENGTH","FORMATTED_LENGTH","length","EXPIRATION_DATE","MONTH_LENGTH","YEAR_LENGTH","USERNAME","CARD_DESCRIPTION","CARD","POCO","name","color","JUN","PARK","BRAN","LOYD","DOBI","COLIN","SUN","UNKNOWN","CARD_SIZE","VIRTUAL_KEYBOARD_TARGET_INPUT","MODAL_DATA_KEY","MODAL_RESERVED_KEYWORD","Button","type","innerText","onClick","className","Card","cardType","cardNumbers","username","expirationDate","size","firstNumbers","secondNumbers","thirdNumbers","fourthNumbers","cardName","Array","map","_","index","Header","title","onPageBack","Input","React","forwardRef","ref","placeHolder","isCenter","value","onChange","disabled","option","placeholder","Modal","children","isVisible","close","target","currentTarget","Radio","checked","CardTypeRadio","groupName","isChecked","JSON","stringify","isNumberValue","test","idMaker","id","shuffle","array","sort","Math","random","VirtualKeyboard","insertInputChar","deleteInputChar","keyInputs","useRef","key","onNumberClick","dataset","number","current","keyInput","data-number","VirtualKeyboardInput","tabIndex","required","formatCardNumbers","numbers","slice","firstTwoNumbers","hiddenNumbers","repeat","join","useCardNumbersInput","initialCardNumbers","onCardNumbersFullfilled","useState","setCardNumbers","inputSelectionStart","setInputSelectionStart","isCardNumbersFullfilled","setIsCardNumbersFullFilled","cardNumbersInputRef","useEffect","setSelectionRange","isFullfilled","every","formattedValue","event","inputString","selectionStart","joinedCardNumbers","lengthDiffComparedToPrev","updatedCardNumbers","inputChar","unformattedValue","replace","splitNumbers","match","curSelection","mod","remainder","calculateProperSelectionLocation","propTypes","PropTypes","func","useControlledInput","initialValue","controlledInput","setControlledInput","useExpirationDateInput","setExpirationDate","unformattedExpirationDate","month","year","formatExpirationDate","useModalVirtualKeyboardInput","targetInputType","maxLength","modalInterface","inputData","setInputData","closeModal","dataPassage","passData","data","modalTargetInputType","targetInput","charInsertion","charDeletion","prevValue","newValue","PropType","string","isRequired","keyboardInterface","shape","isModalVisible","bool","openModal","any","useModalCardTypeInput","setCardType","selectedCardType","useEffectAfterInitialize","callbackFunction","dependency","console","error","useModalInterface","initialPassageData","setIsModalVisible","setData","undefined","CardAdditionForm","onNewCardSubmit","cardTypeSelectionModalInterface","virtualKeyboardModalInterface","cardNumbersInput","cardTypeInput","expirationDateInput","usernameInput","secureCodeInput","firstPasswordInput","secondPasswordInput","openVirtualKeyboard","onSubmit","preventDefault","card","cardId","next","secureCode","firstPassword","secondPassword","alert","minLength","aria-label","cardNumbersCondition","expirationDateCondition","usernameCondition","secureCodeCondition","passwordCondition","isAllInputFulfilled","VirtualKeyboardModal","CardTypeSelectionModal","onCardTypeRadioSelected","parse","Object","values","filter","CardAdditionContext","createContext","addNewCard","CardAddition","Consumer","CompleteCardAddition","props","cardDescription","setCardDescription","to","onCardAdditionComplete","CardAdditionButton","MyCardList","cardList","routeTo","App","setCardList","history","useHistory","location","useLocation","url","PAGE","HEADER_TEXT","CardAdditionContextValue","newCard","prevCardList","pathname","exact","path","Provider","find","String","URLSearchParams","search","get","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.59537fd4.chunk.js","sourcesContent":["export const URL = {\r\n  HOME: \"/\",\r\n  CARD_ADDITION: \"/CardAddition\",\r\n  COMPLETE_CARD_ADDITION: \"/CompleteCardAddition\",\r\n};\r\n\r\nexport const ALERT_MESSAGE = {\r\n  PLEASE_SELECT_CARD_CORP: \"카드 회사를 선택해주세요.\",\r\n};\r\n\r\nexport const QUERY_STRING_KEY = {\r\n  ID: \"id\",\r\n};\r\n\r\nexport const FORMAT_CHAR = {\r\n  HIDDEN_NUMBER: \"•\",\r\n  CARD_NUMBERS_SEPARATOR: \" - \",\r\n  CARD_NUMBERS_SEPARATOR_REG: /[\\s-]/g,\r\n  EXPIRATION_DATE_SEPARATOR: \"/\",\r\n};\r\n\r\nexport const CARD_NUMBER = (() => {\r\n  const LENGTH = 4;\r\n  const PARTIAL_LENGTH = 4;\r\n  const FORMATTED_LENGTH =\r\n    PARTIAL_LENGTH * LENGTH +\r\n    FORMAT_CHAR.CARD_NUMBERS_SEPARATOR.length * (LENGTH - 1);\r\n\r\n  return {\r\n    LENGTH,\r\n    PARTIAL_LENGTH,\r\n    FORMATTED_LENGTH,\r\n  };\r\n})();\r\n\r\nexport const EXPIRATION_DATE = (() => {\r\n  const MONTH_LENGTH = 2;\r\n  const YEAR_LENGTH = 2;\r\n  const LENGTH = MONTH_LENGTH + YEAR_LENGTH;\r\n  const FORMATTED_LENGTH =\r\n    LENGTH + FORMAT_CHAR.EXPIRATION_DATE_SEPARATOR.length;\r\n\r\n  return {\r\n    LENGTH,\r\n    FORMATTED_LENGTH,\r\n    MONTH_LENGTH,\r\n    YEAR_LENGTH,\r\n  };\r\n})();\r\n\r\nexport const USERNAME = {\r\n  MIN_LENGTH: 2,\r\n  MAX_LENGTH: 30,\r\n};\r\n\r\nexport const SECURE_CODE_LENGTH = 3;\r\n\r\nexport const PASSWORD_INPUT_LENGTH = 1;\r\n\r\nexport const CARD_DESCRIPTION = {\r\n  MIN_LENGTH: 1,\r\n  MAX_LENGTH: 30,\r\n};\r\n\r\nexport const CARD = {\r\n  POCO: {\r\n    name: \"포코 카드\",\r\n    color: \"red\",\r\n  },\r\n  JUN: {\r\n    name: \"준 카드\",\r\n    color: \"blue\",\r\n  },\r\n  PARK: {\r\n    name: \"공원 카드\",\r\n    color: \"green\",\r\n  },\r\n  BRAN: {\r\n    name: \"브랜 카드\",\r\n    color: \"pink\",\r\n  },\r\n  LOYD: {\r\n    name: \"로이드 카드\",\r\n    color: \"aqua\",\r\n  },\r\n  DOBI: {\r\n    name: \"도비 카드\",\r\n    color: \"light-pink\",\r\n  },\r\n  COLIN: {\r\n    name: \"콜린 카드\",\r\n    color: \"orange\",\r\n  },\r\n  SUN: {\r\n    name: \"썬 카드\",\r\n    color: \"yellow\",\r\n  },\r\n  UNKNOWN: {\r\n    name: \"\",\r\n    color: \"gray\",\r\n  },\r\n};\r\n\r\nexport const CARD_SIZE = {\r\n  SMALL: \"small\",\r\n  MEDIUM: \"medium\",\r\n  LARGE: \"large\",\r\n};\r\n\r\nexport const VIRTUAL_KEYBOARD_TARGET_INPUT = {\r\n  SECURE_CODE: \"secureCode\",\r\n  FIRST_PASSWORD: \"firstPassword\",\r\n  SECOND_PASSWORD: \"secondPassword\",\r\n};\r\n\r\nexport const MODAL_DATA_KEY = {\r\n  CARD_TYPE: \"cardType\",\r\n  TARGET_INPUT: \"targetInput\",\r\n  CHAR_INSERTION: \"charInsertion\",\r\n  CHAR_DELETION: \"charDeletion\",\r\n};\r\n\r\nexport const MODAL_RESERVED_KEYWORD = {\r\n  WAIT_FOR_INSERTION: \"waitForInsertion\",\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./style.css\";\r\n\r\nconst Button = ({ type = \"submit\", innerText, onClick }) => {\r\n  return (\r\n    <button type={type} className=\"button\" onClick={onClick}>\r\n      {innerText}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  innerText: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { CARD_SIZE } from \"../../../constants\";\r\nimport \"./style.css\";\r\nimport \"../../@style/background.css\";\r\n\r\nconst Card = ({\r\n  cardType,\r\n  cardNumbers = [],\r\n  username,\r\n  expirationDate,\r\n  size,\r\n}) => {\r\n  username = username ? username : \"NAME\";\r\n  expirationDate = expirationDate ? expirationDate : \"MM/YY\";\r\n\r\n  const [\r\n    firstNumbers,\r\n    secondNumbers,\r\n    thirdNumbers,\r\n    fourthNumbers,\r\n  ] = cardNumbers;\r\n  const { name: cardName, color } = cardType;\r\n\r\n  return (\r\n    <div className={`card card--${size} font-${size}`}>\r\n      <div className={`card__inner bg-${color}`}>\r\n        <div className=\"card__inner-card-name font-s\">{cardName}</div>\r\n        <div className=\"card__inner-chip\"></div>\r\n        {cardNumbers.length !== 0 && (\r\n          <ul className=\"font-l\">\r\n            {firstNumbers && <li>{firstNumbers}</li>}\r\n            {secondNumbers && <li>{secondNumbers}</li>}\r\n            {thirdNumbers && (\r\n              <li>\r\n                {[...Array(thirdNumbers.length)].map((_, index) => (\r\n                  <span key={index} className=\"dot\"></span>\r\n                ))}\r\n              </li>\r\n            )}\r\n            {fourthNumbers && (\r\n              <li>\r\n                {[...Array(fourthNumbers.length)].map((_, index) => (\r\n                  <span key={index} className=\"dot\"></span>\r\n                ))}\r\n              </li>\r\n            )}\r\n          </ul>\r\n        )}\r\n        <div className=\"card__inner-bottom font-m\">\r\n          <span className=\"card__inner-bottom-username\">{username}</span>\r\n          <span className=\"card__inner-bottom-expiration-date\">\r\n            {expirationDate}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\nCard.propTypes = {\r\n  cardType: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  cardNumbers: PropTypes.arrayOf(PropTypes.string),\r\n  username: PropTypes.string,\r\n  expirationDate: PropTypes.string,\r\n  size: PropTypes.oneOf(Object.values(CARD_SIZE)).isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ title = \"\", onPageBack }) => {\r\n  return (\r\n    <header className=\"header\">\r\n      {onPageBack && <button onClick={onPageBack}></button>}\r\n      <h2>{title}</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n  onPageBack: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./style.css\";\r\n\r\nconst Input = React.forwardRef(\r\n  (\r\n    {\r\n      type,\r\n      placeHolder,\r\n      isCenter = false,\r\n      value = \"\",\r\n      onChange = null,\r\n      disabled = false,\r\n      ...option\r\n    },\r\n    ref\r\n  ) => {\r\n    return (\r\n      <input\r\n        className={`input ${isCenter ? \"text-center\" : \"\"}`}\r\n        type={type}\r\n        placeholder={placeHolder}\r\n        value={value}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n        {...option}\r\n        ref={ref}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nexport default Input;\r\n\r\nInput.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  placeHolder: PropTypes.string,\r\n  isCenter: PropTypes.bool,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  option: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Modal = ({ children, isVisible, close }) => {\r\n  const onModalClick = ({ target, currentTarget }) => {\r\n    if (target === currentTarget) {\r\n      close();\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`modal ${isVisible ? \"open\" : \"\"}`} onClick={onModalClick}>\r\n      <div className={`modal__inner ${isVisible ? \"open\" : \"\"}`}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  isVisible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n};\r\n","import \"./style.css\";\r\n\r\nconst Radio = ({ className, name, value, checked, onChange, children }) => {\r\n  return (\r\n    <label className={`${className} radio`}>\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        value={value}\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Radio;\r\n","import \"./style.css\";\r\nimport \"../@style/background.css\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Radio from \"../@shared/Radio\";\r\n\r\nconst CardTypeRadio = ({\r\n  cardType,\r\n  groupName,\r\n  isChecked = false,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <Radio\r\n      className=\"card-type-radio\"\r\n      name={groupName}\r\n      value={JSON.stringify(cardType)}\r\n      checked={isChecked}\r\n      onChange={onChange}\r\n    >\r\n      <div className={`card-type-radio__logo bg-${cardType.color}`}></div>\r\n      <p>{cardType.name}</p>\r\n    </Radio>\r\n  );\r\n};\r\n\r\nexport default CardTypeRadio;\r\n\r\nCardTypeRadio.propTypes = {\r\n  cardType: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  groupName: PropTypes.string.isRequired,\r\n  isChecked: PropTypes.bool,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","export const isNumberValue = (value) => {\r\n  return !/[^0-9]/g.test(value);\r\n};\r\n\r\nconst idMaker = (function* () {\r\n  let id = 0;\r\n\r\n  while (1) {\r\n    yield id++;\r\n  }\r\n})();\r\n\r\nexport const getNewId = () => {\r\n  return idMaker.next().value;\r\n};\r\n\r\nexport const shuffle = (array) => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n","import { useRef } from \"react\";\r\nimport { shuffle } from \"../../utils\";\r\nimport \"./style.css\";\r\n\r\nconst VirtualKeyboard = ({ insertInputChar, deleteInputChar }) => {\r\n  const keyInputs = useRef([\r\n    { value: \"1\", key: 1 },\r\n    { value: \"2\", key: 2 },\r\n    { value: \"3\", key: 3 },\r\n    { value: \"4\", key: 4 },\r\n    { value: \"5\", key: 5 },\r\n    { value: \"6\", key: 6 },\r\n    { value: \"7\", key: 7 },\r\n    { value: \"8\", key: 8 },\r\n    { value: \"9\", key: 9 },\r\n    { value: \"0\", key: 10 },\r\n    { value: \"\", key: 11 },\r\n    { value: \"\", key: 12 },\r\n  ]);\r\n\r\n  const onNumberClick = ({ target }) => {\r\n    const value = target.dataset.number;\r\n\r\n    insertInputChar(value);\r\n    shuffle(keyInputs.current);\r\n  };\r\n\r\n  const onDeletionClick = () => {\r\n    deleteInputChar();\r\n    shuffle(keyInputs.current);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"virtual-keyboard\">\r\n        {keyInputs.current.map((keyInput) => (\r\n          <button\r\n            key={keyInput.key}\r\n            className={`key-input ${keyInput.value || \"visible-none\"}`}\r\n            data-number={keyInput.value}\r\n            onClick={onNumberClick}\r\n          >\r\n            {keyInput.value}\r\n          </button>\r\n        ))}\r\n        <div className=\"delete-container\">\r\n          <button\r\n            className=\"delete-container__button\"\r\n            onClick={onDeletionClick}\r\n          >\r\n            del\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VirtualKeyboard;\r\n","import \"./style.css\";\r\nimport Input from \"../@shared/Input\";\r\n\r\nconst VirtualKeyboardInput = ({ isCenter, value }) => {\r\n  return (\r\n    <div className=\"virtual-keyboard-input\" tabIndex=\"0\">\r\n      <Input\r\n        type=\"password\"\r\n        isCenter={isCenter}\r\n        value={value}\r\n        disabled={true}\r\n        required\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VirtualKeyboardInput;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { CARD_NUMBER, FORMAT_CHAR } from \"../../constants\";\r\nimport { isNumberValue } from \"../../utils\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst formatCardNumbers = (numbers) => {\r\n  const [...firstTwoNumbers] = numbers.slice(0, 2);\r\n  const [...secondTwoNumbers] = numbers.slice(2);\r\n\r\n  const hiddenNumbers = secondTwoNumbers.map((value) =>\r\n    FORMAT_CHAR.HIDDEN_NUMBER.repeat(value.length)\r\n  );\r\n\r\n  return [...firstTwoNumbers, ...hiddenNumbers]\r\n    .map((number) => (number ? number : \"\"))\r\n    .join(FORMAT_CHAR.CARD_NUMBERS_SEPARATOR);\r\n};\r\n\r\nconst unformatCardNumbers = (formattedValue) => {\r\n  return formattedValue.replace(FORMAT_CHAR.CARD_NUMBERS_SEPARATOR_REG, \"\");\r\n};\r\n\r\nconst splitCardNumbers = (value) => {\r\n  return value.replace(/\\D/g, \"\").match(/.{1,4}/g) || [];\r\n};\r\n\r\nconst calculateProperSelectionLocation = (curSelection) => {\r\n  const mod =\r\n    CARD_NUMBER.PARTIAL_LENGTH + FORMAT_CHAR.CARD_NUMBERS_SEPARATOR.length;\r\n  const remainder = curSelection % mod;\r\n\r\n  const isSelectionValid = [\r\n    ...Array(FORMAT_CHAR.CARD_NUMBERS_SEPARATOR.length - 1),\r\n  ].every((_, index) => remainder !== (mod - index - 1) % mod);\r\n\r\n  return isSelectionValid ? curSelection : curSelection + (mod - remainder + 1);\r\n};\r\n\r\nconst useCardNumbersInput = ({\r\n  initialCardNumbers = [],\r\n  onCardNumbersFullfilled = () => {},\r\n}) => {\r\n  const [cardNumbers, setCardNumbers] = useState(initialCardNumbers);\r\n  const [inputSelectionStart, setInputSelectionStart] = useState(0);\r\n  const [isCardNumbersFullfilled, setIsCardNumbersFullFilled] = useState(false);\r\n  const cardNumbersInputRef = useRef();\r\n\r\n  const onCardNumbersChange = (event) => {\r\n    const { value: inputString, selectionStart } = event.target;\r\n    const joinedCardNumbers = cardNumbers.join(\r\n      FORMAT_CHAR.CARD_NUMBERS_SEPARATOR\r\n    );\r\n    const lengthDiffComparedToPrev =\r\n      inputString.length - joinedCardNumbers.length;\r\n    let updatedCardNumbers = joinedCardNumbers;\r\n\r\n    if (lengthDiffComparedToPrev >= 0) {\r\n      const inputChar = inputString[selectionStart - 1];\r\n\r\n      if (!isNumberValue(inputChar)) {\r\n        return;\r\n      }\r\n\r\n      updatedCardNumbers =\r\n        joinedCardNumbers.slice(0, selectionStart - 1) +\r\n        inputChar +\r\n        joinedCardNumbers.slice(\r\n          lengthDiffComparedToPrev === 0 ? selectionStart : selectionStart - 1\r\n        );\r\n    }\r\n\r\n    if (lengthDiffComparedToPrev < 0) {\r\n      updatedCardNumbers =\r\n        joinedCardNumbers.slice(0, selectionStart) +\r\n        joinedCardNumbers.slice(selectionStart + 1);\r\n    }\r\n\r\n    const unformattedValue = unformatCardNumbers(updatedCardNumbers);\r\n    const splitNumbers = splitCardNumbers(unformattedValue);\r\n\r\n    setCardNumbers(splitNumbers);\r\n    setInputSelectionStart(calculateProperSelectionLocation(selectionStart));\r\n  };\r\n\r\n  useEffect(() => {\r\n    cardNumbersInputRef?.current?.setSelectionRange(\r\n      inputSelectionStart,\r\n      inputSelectionStart\r\n    );\r\n  }, [inputSelectionStart, cardNumbers]);\r\n\r\n  useEffect(() => {\r\n    const isFullfilled = [...Array(CARD_NUMBER.LENGTH)]\r\n      .map(\r\n        (_, index) => cardNumbers[index]?.length === CARD_NUMBER.PARTIAL_LENGTH\r\n      )\r\n      .every((value) => value === true);\r\n\r\n    setIsCardNumbersFullFilled(isFullfilled);\r\n  }, [cardNumbers]);\r\n\r\n  useEffect(() => {\r\n    if (!isCardNumbersFullfilled) {\r\n      return;\r\n    }\r\n\r\n    onCardNumbersFullfilled();\r\n  }, [isCardNumbersFullfilled]);\r\n\r\n  return {\r\n    value: cardNumbers,\r\n    formattedValue: formatCardNumbers(cardNumbers),\r\n    ref: cardNumbersInputRef,\r\n    onChange: onCardNumbersChange,\r\n    isFullfilled: isCardNumbersFullfilled,\r\n  };\r\n};\r\n\r\nexport default useCardNumbersInput;\r\n\r\nuseCardNumbersInput.propTypes = {\r\n  initialCardNumbers: PropTypes.array,\r\n  onCardNumbersFullfilled: PropTypes.func,\r\n};\r\n","import { useState } from \"react\";\r\n\r\nconst useControlledInput = (initialValue) => {\r\n  const [controlledInput, setControlledInput] = useState(initialValue);\r\n\r\n  const onControlledInputValueChange = (event) => {\r\n    const { value } = event.target;\r\n\r\n    setControlledInput(value);\r\n  };\r\n\r\n  return { value: controlledInput, onChange: onControlledInputValueChange };\r\n};\r\n\r\nexport default useControlledInput;\r\n","import { useState } from \"react\";\r\nimport { EXPIRATION_DATE, FORMAT_CHAR } from \"../../constants\";\r\nimport { isNumberValue } from \"../../utils\";\r\n\r\nconst unformatExpirationDate = (formattedValue) => {\r\n  return formattedValue.replace(FORMAT_CHAR.EXPIRATION_DATE_SEPARATOR, \"\");\r\n};\r\n\r\nconst formatExpirationDate = (unformattedExpirationDate) => {\r\n  const month = unformattedExpirationDate.slice(\r\n    0,\r\n    EXPIRATION_DATE.MONTH_LENGTH\r\n  );\r\n  const year = unformattedExpirationDate.slice(EXPIRATION_DATE.MONTH_LENGTH);\r\n\r\n  if (year) {\r\n    return month + \"/\" + year;\r\n  }\r\n\r\n  return month;\r\n};\r\n\r\nconst useExpirationDateInput = (initialValue) => {\r\n  const [expirationDate, setExpirationDate] = useState(initialValue);\r\n\r\n  const onExpirationDateChange = ({ target }) => {\r\n    const unformattedValue = unformatExpirationDate(target.value);\r\n\r\n    if (!isNumberValue(unformattedValue)) {\r\n      return;\r\n    }\r\n\r\n    setExpirationDate(formatExpirationDate(unformattedValue));\r\n  };\r\n\r\n  return { value: expirationDate, onChange: onExpirationDateChange };\r\n};\r\n\r\nexport default useExpirationDateInput;\r\n","import { useEffect, useState } from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport { MODAL_DATA_KEY, MODAL_RESERVED_KEYWORD } from \"../../constants\";\r\n\r\nconst useModalVirtualKeyboardInput = ({\r\n  targetInputType,\r\n  maxLength,\r\n  modalInterface,\r\n}) => {\r\n  const [inputData, setInputData] = useState(\"\");\r\n  const {\r\n    closeModal,\r\n    dataPassage: {\r\n      passData,\r\n      data: { targetInput: modalTargetInputType, charInsertion, charDeletion },\r\n    },\r\n  } = modalInterface;\r\n\r\n  const insertInputChar = (value) => {\r\n    setInputData((prevValue) => {\r\n      const newValue = prevValue + value;\r\n\r\n      if (newValue.length > maxLength) {\r\n        closeModal();\r\n        return prevValue;\r\n      }\r\n\r\n      if (newValue.length === maxLength) {\r\n        closeModal();\r\n      }\r\n\r\n      return newValue;\r\n    });\r\n  };\r\n\r\n  const deleteInputChar = () => {\r\n    setInputData((prevValue) => prevValue.replace(/\\d$/, \"\"));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      charInsertion === MODAL_RESERVED_KEYWORD.WAIT_FOR_INSERTION ||\r\n      charInsertion === null\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (targetInputType !== modalTargetInputType) {\r\n      return;\r\n    }\r\n\r\n    insertInputChar(charInsertion);\r\n    passData(\r\n      MODAL_DATA_KEY.CHAR_INSERTION,\r\n      MODAL_RESERVED_KEYWORD.WAIT_FOR_INSERTION\r\n    );\r\n  }, [charInsertion]);\r\n\r\n  useEffect(() => {\r\n    if (!charDeletion) {\r\n      return;\r\n    }\r\n\r\n    if (targetInputType !== modalTargetInputType) {\r\n      return;\r\n    }\r\n\r\n    passData(MODAL_DATA_KEY.CHAR_DELETION, false);\r\n    deleteInputChar();\r\n  }, [charDeletion]);\r\n\r\n  return { value: inputData };\r\n};\r\n\r\nexport default useModalVirtualKeyboardInput;\r\n\r\nuseModalVirtualKeyboardInput.PropType = {\r\n  targetInputType: PropType.string.isRequired,\r\n  maxLength: PropType.string.isRequired,\r\n  keyboardInterface: PropType.shape({\r\n    isModalVisible: PropType.bool.isRequired,\r\n    openModal: PropType.func.isRequired,\r\n    closeModal: PropType.func.isRequired,\r\n    dataPassage: PropType.shape({\r\n      data: PropType.any.isRequired,\r\n      passData: PropType.func.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\n","import { useState } from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport { CARD } from \"../../constants\";\r\nimport { useEffectAfterInitialize } from \"..\";\r\n\r\nconst useModalCardTypeInput = ({ modalInterface }) => {\r\n  const [cardType, setCardType] = useState(CARD.UNKNOWN);\r\n\r\n  const {\r\n    dataPassage: {\r\n      data: { cardType: selectedCardType },\r\n    },\r\n  } = modalInterface;\r\n\r\n  useEffectAfterInitialize(() => {\r\n    if (!selectedCardType) {\r\n      return;\r\n    }\r\n\r\n    setCardType(selectedCardType);\r\n  }, [selectedCardType]);\r\n\r\n  return { value: cardType };\r\n};\r\n\r\nexport default useModalCardTypeInput;\r\n\r\nuseModalCardTypeInput.PropType = {\r\n  targetInputType: PropType.string.isRequired,\r\n  maxLength: PropType.string.isRequired,\r\n  keyboardInterface: PropType.shape({\r\n    isModalVisible: PropType.bool.isRequired,\r\n    openModal: PropType.func.isRequired,\r\n    closeModal: PropType.func.isRequired,\r\n    dataPassage: PropType.shape({\r\n      data: PropType.shape({\r\n        cardType: PropType.string.isRequired,\r\n      }).isRequired,\r\n      passData: PropType.func.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useEffectAfterInitialize = (callbackFunction, dependency = []) => {\r\n  if (!dependency?.length) {\r\n    console.error(\r\n      \"useEffectAfterInitialize 에러 : dependency 배열은 1개 이상의 element를 가지고 있어야합니다.\"\r\n    );\r\n  }\r\n\r\n  const ref = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) {\r\n      ref.current = true;\r\n    }\r\n\r\n    callbackFunction();\r\n  }, dependency);\r\n};\r\n\r\nexport default useEffectAfterInitialize;\r\n","import { useState } from \"react\";\r\n\r\nconst useModalInterface = (initialPassageData) => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [data, setData] = useState(initialPassageData);\r\n\r\n  const passData = (key, value) => {\r\n    if (data[key] === undefined) {\r\n      console.error(\r\n        \"useModalInterface - passData() 에러 : 해당 key 값이 존재하지 않습니다.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    setData({\r\n      ...data,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const dataPassage = {\r\n    data,\r\n    passData,\r\n  };\r\n\r\n  const openModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return { isModalVisible, openModal, closeModal, dataPassage };\r\n};\r\n\r\nexport default useModalInterface;\r\n","import {\r\n  ALERT_MESSAGE,\r\n  CARD_NUMBER,\r\n  EXPIRATION_DATE,\r\n  FORMAT_CHAR,\r\n  PASSWORD_INPUT_LENGTH,\r\n  SECURE_CODE_LENGTH,\r\n  USERNAME,\r\n  VIRTUAL_KEYBOARD_TARGET_INPUT,\r\n} from \"../../constants\";\r\nimport {\r\n  useCardNumbersInput,\r\n  useControlledInput,\r\n  useExpirationDateInput,\r\n  useModalCardTypeInput,\r\n  useModalVirtualKeyboardInput,\r\n} from \"../../hooks\";\r\nimport { getNewId } from \"../../utils\";\r\nimport { Button, Card, Input, VirtualKeyboardInput } from \"../../components\";\r\nimport { CARD, CARD_SIZE, MODAL_DATA_KEY } from \"../../constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CardAdditionForm = ({\r\n  onNewCardSubmit,\r\n  cardTypeSelectionModalInterface,\r\n  virtualKeyboardModalInterface,\r\n}) => {\r\n  const cardNumbersInput = useCardNumbersInput({\r\n    onCardNumbersFullfilled: cardTypeSelectionModalInterface.openModal,\r\n  });\r\n  const cardTypeInput = useModalCardTypeInput({\r\n    modalInterface: cardTypeSelectionModalInterface,\r\n  });\r\n  const expirationDateInput = useExpirationDateInput(\"\");\r\n  const usernameInput = useControlledInput(\"\");\r\n  const secureCodeInput = useModalVirtualKeyboardInput({\r\n    targetInputType: VIRTUAL_KEYBOARD_TARGET_INPUT.SECURE_CODE,\r\n    maxLength: SECURE_CODE_LENGTH,\r\n    modalInterface: virtualKeyboardModalInterface,\r\n  });\r\n  const firstPasswordInput = useModalVirtualKeyboardInput({\r\n    targetInputType: VIRTUAL_KEYBOARD_TARGET_INPUT.FIRST_PASSWORD,\r\n    maxLength: PASSWORD_INPUT_LENGTH,\r\n    modalInterface: virtualKeyboardModalInterface,\r\n  });\r\n  const secondPasswordInput = useModalVirtualKeyboardInput({\r\n    targetInputType: VIRTUAL_KEYBOARD_TARGET_INPUT.SECOND_PASSWORD,\r\n    maxLength: PASSWORD_INPUT_LENGTH,\r\n    modalInterface: virtualKeyboardModalInterface,\r\n  });\r\n\r\n  const openVirtualKeyboard = (targetInput) => () => {\r\n    virtualKeyboardModalInterface.dataPassage.passData(\r\n      MODAL_DATA_KEY.TARGET_INPUT,\r\n      targetInput\r\n    );\r\n    virtualKeyboardModalInterface.openModal();\r\n  };\r\n\r\n  const isAllInputFulfilled = () => {\r\n    const cardNumbersCondition = cardNumbersInput.isFullfilled;\r\n    const expirationDateCondition =\r\n      expirationDateInput.value.length ===\r\n      EXPIRATION_DATE.LENGTH + FORMAT_CHAR.EXPIRATION_DATE_SEPARATOR.length;\r\n    const usernameCondition = usernameInput.value.length >= USERNAME.MIN_LENGTH;\r\n    const secureCodeCondition =\r\n      secureCodeInput.value.length === SECURE_CODE_LENGTH;\r\n    const passwordCondition =\r\n      firstPasswordInput.value && secondPasswordInput.value;\r\n\r\n    return (\r\n      cardNumbersCondition &&\r\n      expirationDateCondition &&\r\n      usernameCondition &&\r\n      secureCodeCondition &&\r\n      passwordCondition\r\n    );\r\n  };\r\n\r\n  const onCardInfoSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (cardTypeInput.value.name === CARD.UNKNOWN.name) {\r\n      alert(ALERT_MESSAGE.PLEASE_SELECT_CARD_CORP);\r\n      return;\r\n    }\r\n\r\n    const card = {\r\n      cardId: getNewId(),\r\n      cardType: cardTypeInput.value,\r\n      cardNumbers: cardNumbersInput.value,\r\n      expirationDate: expirationDateInput.value,\r\n      username: usernameInput.value,\r\n      secureCode: secureCodeInput.value,\r\n      firstPassword: firstPasswordInput.value,\r\n      secondPassword: secondPasswordInput.value,\r\n    };\r\n\r\n    onNewCardSubmit(card);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onCardInfoSubmit} className=\"card-addition__form\">\r\n      <div className=\"card-addition\">\r\n        <Card\r\n          cardType={cardTypeInput.value}\r\n          size={CARD_SIZE.MEDIUM}\r\n          expirationDate={expirationDateInput.value}\r\n          username={usernameInput.value}\r\n          cardNumbers={cardNumbersInput.value}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"card-addition__number-input mt-standard\">\r\n        <label>\r\n          <span>카드 번호</span>\r\n          <Input\r\n            type=\"text\"\r\n            isCenter={true}\r\n            value={cardNumbersInput.formattedValue}\r\n            onChange={cardNumbersInput.onChange}\r\n            ref={cardNumbersInput.ref}\r\n            maxLength={CARD_NUMBER.FORMATTED_LENGTH}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"card-addition__expiration-input mt-standard\">\r\n        <label>\r\n          <span>만료일</span>\r\n          <Input\r\n            type=\"text\"\r\n            isCenter={true}\r\n            placeHolder=\"MM / YY\"\r\n            value={expirationDateInput.value}\r\n            onChange={expirationDateInput.onChange}\r\n            maxLength={EXPIRATION_DATE.FORMATTED_LENGTH}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"card-addition__username-input mt-standard\">\r\n        <label>\r\n          <span>카드 소유자 이름(선택)</span>\r\n          <span className=\"card-addition__username-indicator\">\r\n            {usernameInput.value.length}/30\r\n          </span>\r\n          <Input\r\n            type=\"text\"\r\n            placeHolder=\"카드에 표시된 이름과 동일하게 입력하세요\"\r\n            value={usernameInput.value}\r\n            onChange={usernameInput.onChange}\r\n            maxLength={USERNAME.MAX_LENGTH}\r\n            minLength={USERNAME.MIN_LENGTH}\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"card-addition__secure-code mt-standard\">\r\n        <label>\r\n          <span>보안 코드(CVC/CVV)</span>\r\n          <div className=\"card-addition__secure-code-inner\">\r\n            <div\r\n              onClick={openVirtualKeyboard(\r\n                VIRTUAL_KEYBOARD_TARGET_INPUT.SECURE_CODE\r\n              )}\r\n            >\r\n              <VirtualKeyboardInput\r\n                type=\"password\"\r\n                isCenter={true}\r\n                value={secureCodeInput.value}\r\n              />\r\n            </div>\r\n            <div className=\"card-addition__tool-tip-button\">\r\n              <span>?</span>\r\n            </div>\r\n          </div>\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"card-addition__password mt-standard\">\r\n        <label>\r\n          <span>카드비밀번호</span>\r\n        </label>\r\n        <div className=\"card-addition__password-inner\">\r\n          <div\r\n            className=\"card-addition__password-inner__password\"\r\n            onClick={openVirtualKeyboard(\r\n              VIRTUAL_KEYBOARD_TARGET_INPUT.FIRST_PASSWORD\r\n            )}\r\n          >\r\n            <VirtualKeyboardInput\r\n              type=\"password\"\r\n              isCenter={true}\r\n              aria-label=\"첫번째 비밀번호\"\r\n              value={firstPasswordInput.value}\r\n              required\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"card-addition__password-inner__password\"\r\n            onClick={openVirtualKeyboard(\r\n              VIRTUAL_KEYBOARD_TARGET_INPUT.SECOND_PASSWORD\r\n            )}\r\n          >\r\n            <VirtualKeyboardInput\r\n              type=\"password\"\r\n              isCenter={true}\r\n              aria-label=\"두번째 비밀번호\"\r\n              value={secondPasswordInput.value}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"card-addition__dot-wrapper\">\r\n            <span className=\"card-addition__dot\"></span>\r\n          </div>\r\n          <div className=\"card-addition__dot-wrapper\">\r\n            <span className=\"card-addition__dot\"></span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {isAllInputFulfilled() && (\r\n        <div className=\"card-addition__form-submit\">\r\n          <Button innerText=\"다음\" />\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nCardAdditionForm.propTypes = {\r\n  onNewCardSubmit: PropTypes.func.isRequired,\r\n  virtualKeyboardModalInterface: PropTypes.shape({\r\n    openModal: PropTypes.func.isRequired,\r\n    closeModal: PropTypes.func.isRequired,\r\n    dataPassage: PropTypes.shape({\r\n      data: PropTypes.any.isRequired,\r\n      passData: PropTypes.func.isRequired,\r\n    }).isRequired,\r\n  }),\r\n  cardTypeSelectionModalInterface: PropTypes.shape({\r\n    openModal: PropTypes.func.isRequired,\r\n    closeModal: PropTypes.func.isRequired,\r\n    dataPassage: PropTypes.shape({\r\n      data: PropTypes.any.isRequired,\r\n      passData: PropTypes.func.isRequired,\r\n    }).isRequired,\r\n  }),\r\n};\r\n\r\nexport default CardAdditionForm;\r\n","import React from \"react\";\r\nimport Modal from \"../@shared/Modal\";\r\nimport VirtualKeyboard from \"../VirtualKeyboard\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MODAL_DATA_KEY } from \"../../constants\";\r\n\r\nconst VirtualKeyboardModal = ({ isVisible, close, dataPassage }) => {\r\n  const transferCharInsertionToInput = (value) => {\r\n    dataPassage.passData(MODAL_DATA_KEY.CHAR_INSERTION, value);\r\n  };\r\n\r\n  const transferCharDeletionToInput = () => {\r\n    dataPassage.passData(MODAL_DATA_KEY.CHAR_DELETION, true);\r\n  };\r\n\r\n  return (\r\n    <Modal isVisible={isVisible} close={close}>\r\n      <VirtualKeyboard\r\n        insertInputChar={transferCharInsertionToInput}\r\n        deleteInputChar={transferCharDeletionToInput}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default VirtualKeyboardModal;\r\n\r\nVirtualKeyboardModal.propTypes = {\r\n  isVisible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  dataPassage: PropTypes.shape({\r\n    data: PropTypes.shape({\r\n      targetInput: PropTypes.string,\r\n      charInsertion: PropTypes.string,\r\n      charDeletion: PropTypes.bool,\r\n    }).isRequired,\r\n    passData: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n","import React from \"react\";\r\nimport Modal from \"../@shared/Modal\";\r\nimport CardTypeRadio from \"../CardTypeRadio\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CARD, MODAL_DATA_KEY } from \"../../constants\";\r\n\r\nconst CardTypeSelectionModal = ({ isVisible, close, dataPassage }) => {\r\n  const onCardTypeRadioSelected = ({ target }) => {\r\n    dataPassage.passData(MODAL_DATA_KEY.CARD_TYPE, JSON.parse(target.value));\r\n    close();\r\n  };\r\n\r\n  return (\r\n    <Modal isVisible={isVisible} close={close}>\r\n      <form className=\"card-type-radio-box\">\r\n        {Object.values(CARD)\r\n          .filter((value) => value.name !== \"\")\r\n          .map((value) => (\r\n            <CardTypeRadio\r\n              key={value.name + value.color}\r\n              cardType={value}\r\n              groupName=\"card-type\"\r\n              isChecked={value.name === dataPassage.data.cardType?.name}\r\n              onChange={onCardTypeRadioSelected}\r\n            />\r\n          ))}\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CardTypeSelectionModal;\r\n\r\nCardTypeSelectionModal.propTypes = {\r\n  isVisible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  dataPassage: PropTypes.shape({\r\n    data: PropTypes.shape({\r\n      cardType: PropTypes.any,\r\n    }).isRequired,\r\n    passData: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n","import React from \"react\";\r\n\r\nexport const CardAdditionContext = React.createContext({\r\n  addNewCard: () => {},\r\n});\r\n","import \"./style.css\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CardAdditionForm from \"./CardAdditionForm\";\r\nimport { useModalInterface } from \"../../hooks\";\r\nimport VirtualKeyboardModal from \"../../components/VirtualKeyboardModal\";\r\nimport CardTypeSelectionModal from \"../../components/CardTypeSelectionModal\";\r\nimport { MODAL_DATA_KEY } from \"../../constants\";\r\nimport { CardAdditionContext } from \"../../context/CardAdditionContext\";\r\n\r\nconst CardAddition = () => {\r\n  const cardTypeSelectionModalInterface = useModalInterface({\r\n    [MODAL_DATA_KEY.CARD_TYPE]: null,\r\n  });\r\n  const virtualKeyboardModalInterface = useModalInterface({\r\n    [MODAL_DATA_KEY.TARGET_INPUT]: null,\r\n    [MODAL_DATA_KEY.CHAR_INSERTION]: null,\r\n    [MODAL_DATA_KEY.CHAR_DELETION]: false,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <CardAdditionContext.Consumer>\r\n        {({ addNewCard }) => (\r\n          <CardAdditionForm\r\n            onNewCardSubmit={addNewCard}\r\n            cardTypeSelectionModalInterface={cardTypeSelectionModalInterface}\r\n            virtualKeyboardModalInterface={virtualKeyboardModalInterface}\r\n          />\r\n        )}\r\n      </CardAdditionContext.Consumer>\r\n\r\n      <CardTypeSelectionModal\r\n        isVisible={cardTypeSelectionModalInterface.isModalVisible}\r\n        close={cardTypeSelectionModalInterface.closeModal}\r\n        dataPassage={cardTypeSelectionModalInterface.dataPassage}\r\n      />\r\n\r\n      <VirtualKeyboardModal\r\n        isVisible={virtualKeyboardModalInterface.isModalVisible}\r\n        close={virtualKeyboardModalInterface.closeModal}\r\n        dataPassage={virtualKeyboardModalInterface.dataPassage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nCardAddition.propTypes = {\r\n  onNewCardAdd: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CardAddition;\r\n","import \"./style.css\";\r\nimport React, { useState } from \"react\";\r\nimport { CARD_SIZE } from \"../../constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Button } from \"../../components\";\r\nimport { CARD_DESCRIPTION, URL } from \"../../constants\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst CompleteCardAddition = (props) => {\r\n  const [cardDescription, setCardDescription] = useState(\"\");\r\n\r\n  if (!props.card) {\r\n    alert(\"예상치 못한 오류가 발생했습니다.\");\r\n    return <Redirect to={URL.HOME} />;\r\n  }\r\n\r\n  const {\r\n    cardId,\r\n    cardType,\r\n    cardNumbers,\r\n    expirationDate,\r\n    username,\r\n  } = props.card;\r\n\r\n  const onCardDescriptionChange = ({ target }) => {\r\n    setCardDescription(target.value);\r\n  };\r\n\r\n  const onDescriptionSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    props.onCardAdditionComplete(cardId, cardDescription);\r\n  };\r\n\r\n  return (\r\n    <div className=\"complete-card-addition\">\r\n      <h2>카드등록이 완료되었습니다.</h2>\r\n      <Card\r\n        cardType={cardType}\r\n        cardNumbers={cardNumbers}\r\n        username={username}\r\n        expirationDate={expirationDate}\r\n        size={CARD_SIZE.LARGE}\r\n      />\r\n      <form onSubmit={onDescriptionSubmit}>\r\n        <input\r\n          value={cardDescription}\r\n          onChange={onCardDescriptionChange}\r\n          type=\"text\"\r\n          minLength={CARD_DESCRIPTION.MIN_LENGTH}\r\n          maxLength={CARD_DESCRIPTION.MAX_LENGTH}\r\n          placeholder=\"카드 별명을 입력해주세요\"\r\n          required\r\n        />\r\n        <Button innerText=\"확인\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nCompleteCardAddition.propTypes = {\r\n  onCardAdditionComplete: PropTypes.func.isRequired,\r\n  card: PropTypes.shape({\r\n    cardType: PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n    }),\r\n    cardNumbers: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    expirationDate: PropTypes.string.isRequired,\r\n    username: PropTypes.string.isRequired,\r\n    secureCode: PropTypes.string.isRequired,\r\n    password: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  }),\r\n};\r\n\r\nexport default CompleteCardAddition;\r\n","import \"../@style/background.css\";\r\nimport \"./style.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CARD_SIZE } from \"../../constants\";\r\n\r\nconst CardAdditionButton = ({ size, onClick }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`card-addition-button card card--${size} font-${size}`}\r\n    >\r\n      <div className=\"card__inner bg-gray\">\r\n        <span>+</span>\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\nCardAdditionButton.propTypes = {\r\n  size: PropTypes.oneOf(Object.values(CARD_SIZE)).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CardAdditionButton;\r\n","import \"./style.css\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CARD_SIZE, URL } from \"../../constants\";\r\nimport { Card } from \"../../components\";\r\nimport CardAdditionButton from \"../../components/CardAdditionButton\";\r\n\r\nconst MyCardList = (props) => {\r\n  const { cardList } = props;\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"my-card-list\">\r\n        {cardList.map((card) => (\r\n          <li key={card.cardNumbers.join(\"\")}>\r\n            <Card {...card} size={CARD_SIZE.SMALL} />\r\n            <p>{card.cardDescription}</p>\r\n          </li>\r\n        ))}\r\n        <li>\r\n          <CardAdditionButton\r\n            size={CARD_SIZE.SMALL}\r\n            onClick={() => {\r\n              props.routeTo(URL.CARD_ADDITION);\r\n            }}\r\n          />\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nMyCardList.propTypes = {\r\n  cardList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      cardType: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        color: PropTypes.string.isRequired,\r\n      }),\r\n      cardNumbers: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n      expirationDate: PropTypes.string.isRequired,\r\n      username: PropTypes.string.isRequired,\r\n      secureCode: PropTypes.string.isRequired,\r\n      password: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    }).isRequired\r\n  ),\r\n};\r\n\r\nexport default MyCardList;\r\n","import \"./style.css\";\r\nimport React, { useMemo, useRef, useState } from \"react\";\r\nimport { URL } from \"../constants\";\r\nimport { Header } from \"../components\";\r\nimport CardAddition from \"./CardAddition\";\r\nimport CompleteCardAddition from \"./CompleteCardAddition\";\r\nimport MyCardList from \"./MyCardList\";\r\nimport { Route, Switch, useHistory, useLocation } from \"react-router\";\r\nimport { QUERY_STRING_KEY } from \"../constants.js\";\r\nimport { CardAdditionContext } from \"../context/CardAdditionContext\";\r\n\r\nconst App = () => {\r\n  const [cardList, setCardList] = useState([]);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const routeTo = (url) => {\r\n    history.replace(url);\r\n  };\r\n\r\n  const addNewCard = (card) => {\r\n    const newCard = { cardDescription: null, ...card };\r\n\r\n    setCardList((prevCardList) => [...prevCardList, newCard]);\r\n    routeTo(\r\n      URL.COMPLETE_CARD_ADDITION + `?${QUERY_STRING_KEY.ID}=${newCard.cardId}`\r\n    );\r\n  };\r\n\r\n  const onCardAdditionComplete = (cardId, cardDescription) => {\r\n    setCardList((prevCardList) =>\r\n      prevCardList.map((card) => {\r\n        if (card.cardId !== cardId) {\r\n          return card;\r\n        }\r\n\r\n        card.cardDescription = cardDescription;\r\n\r\n        return card;\r\n      })\r\n    );\r\n\r\n    routeTo(URL.HOME);\r\n  };\r\n\r\n  const PAGE = {\r\n    [URL.HOME]: {\r\n      HEADER_TEXT: \"보유카드\",\r\n      onPageBack: null,\r\n    },\r\n    [URL.CARD_ADDITION]: {\r\n      HEADER_TEXT: \"카드추가\",\r\n      onPageBack: () => {\r\n        routeTo(URL.HOME);\r\n      },\r\n    },\r\n    [URL.COMPLETE_CARD_ADDITION]: {\r\n      HEADER_TEXT: \"\",\r\n      onPageBack: null,\r\n    },\r\n  };\r\n\r\n  const CardAdditionContextValue = useRef({\r\n    addNewCard,\r\n  });\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header\r\n        title={PAGE[location.pathname].HEADER_TEXT}\r\n        onPageBack={PAGE[location.pathname].onPageBack}\r\n      />\r\n      <main>\r\n        <Switch>\r\n          <Route exact path={URL.HOME}>\r\n            <MyCardList cardList={cardList} routeTo={routeTo} />\r\n          </Route>\r\n\r\n          <Route exact path={URL.CARD_ADDITION}>\r\n            <CardAdditionContext.Provider\r\n              value={CardAdditionContextValue.current}\r\n            >\r\n              <CardAddition />\r\n            </CardAdditionContext.Provider>\r\n          </Route>\r\n\r\n          <Route exact path={URL.COMPLETE_CARD_ADDITION}>\r\n            <CompleteCardAddition\r\n              onCardAdditionComplete={onCardAdditionComplete}\r\n              card={cardList.find(\r\n                (card) =>\r\n                  String(card.cardId) ===\r\n                  new URLSearchParams(location.search).get(QUERY_STRING_KEY.ID)\r\n              )}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"./style.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./pages\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename=\"react-payments\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}